@*http://blog.ppedv.de/post/Boostrap-Modal-Dialog-fur-Blazor*@

@if (_show)
{
    <div class="modal fade show" id="myModal" style="display: block;">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>@this._title</h4>
                    <button type="button" class="close" data-dismiss="modal" @onclick="@CloseClicked">&times;</button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrWhiteSpace(this._prompt))
                    {
                        <p>
                            @this._prompt
                        </p>
                    }
                    <p>
                        <input type="text" class="form-control" placeholder="@this._title" @bind="@Result">
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="@OkClicked">OK</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@CloseClicked">@Properties.Resources.Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool _show;
    public string _title;
    public string _prompt;

    [Parameter]
    public string Result { get; set; }

    [Parameter]
    public Action<MouseEventArgs> OnClosed { get; set; }

    [Parameter]
    public Action<MouseEventArgs, string> OnOkClicked { get; set; }

    public void Show(string title, string prompt)
    {
        _title = title;
        _prompt = prompt;
        _show = true;
        this.Result = string.Empty;
        InvokeAsync(StateHasChanged);
    }

    private void CloseClicked(MouseEventArgs e)
    {
        this.Close();
        this.OnClosed?.Invoke(e);
    }

    private void OkClicked(MouseEventArgs e)
    {
        this.Close();
        this.OnOkClicked?.Invoke(e, this.Result);
    }

    private void Close()
    {
        _show = false;
        InvokeAsync(StateHasChanged);
    }
}