@using mitoSoft.Razor.Components.Enums

@inherits Microsoft.AspNetCore.Components.Web.ErrorBoundary

@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

@* https://github.com/dotnet/aspnetcore/blob/9ace45d8dffb0c89026df3cd989b49f87c61344c/src/Components/test/testassets/BasicTestApp/ErrorBoundaryTest/CustomErrorBoundary.razor *@

@if (!string.IsNullOrEmpty(this._message) && ErrorContent is not null)
{
    @ErrorContent(CurrentException!)
}
else if (!string.IsNullOrEmpty(this._message) && this.Options.Mode == ErrorBoundaryMode.ErrorText)
{
    <div class="mitosoft-error-boundary">
        <div class="row">
            <label class="form-label text-danger mitosoft-text-danger">
                @this._message
            </label>
        </div>
        @if (this.Options.Reload)
        {
            <div class="row">
                <div class="col-auto">
                    <button class="btn btn-danger mitosoft-btn mitosoft-btn-danger" @onclick="OkClicked">
                        Ok
                    </button>
                </div>
            </div>
        }
    </div>

    @if (this.Options.ShowChildContentOnError)
    {
        @ChildContent
    }
}
else if (string.IsNullOrEmpty(this._message))
{
    @ChildContent
}

@code {
    private string _message = string.Empty;

    [Parameter]
    public ErrorBoundaryOptions Options { get; set; }

    [Parameter]
    public IErrorBoundaryHandler Handler { get; set; }

    protected override Task OnErrorAsync(Exception exception)
    {
        _message = this.Handler?.OnExceptionFired(exception) ?? exception.Message;

        if (this.Options.Mode == ErrorBoundaryMode.JSModal)
        {
            this.ShowExceptionMessage(this._message);

            if (this.Options.Reload)
            {
                this.Recover();
            }
        }

        return base.OnErrorAsync(exception);
    }

    private void OkClicked()
    {
        if (this.Options.Reload)
        {
            this.Recover();
        }
    }

    public new void Recover()
    {
        //if redirect uri is empty then stay on actual site
        if (!string.IsNullOrEmpty(this.Options.RedirectUri))
        {
            NavManager.NavigateTo(this.Options.RedirectUri);
        }
        this._message = "";
        base.Recover();
    }

    private void ShowExceptionMessage(string message)
    {
        JsRuntime.InvokeVoidAsync("alert", message);
    }
}