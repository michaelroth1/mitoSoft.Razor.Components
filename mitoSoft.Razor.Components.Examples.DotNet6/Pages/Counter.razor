@page "/counter"
@using mitoSoft.Razor.Components.Enums
@using mitoSoft.Razor.Components.Templates

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCountAsync">Click me</button>

<button class="btn btn-primary" @onclick="IncrementCountSync">Count Up Sync</button>

<br />
<br />

<CollapsibleCard Title="Collapse">
    <CardBody>
        <div>
            <button class="btn btn-primary" @onclick="SetCountAsync">Set Count Async</button>

            <button class="btn btn-primary" @onclick="SetCountSync">Set Count Sync</button>

            <br />
            <br />

            <button class="btn btn-primary" @onclick="OpenDerivedModal">Open derived modal</button>
        </div>
    </CardBody>
</CollapsibleCard>

<MessageBox @ref=@_messageBox></MessageBox>

<InputBox @ref="@_inputBox" OnClosed="@SetCountAsyncCallback"></InputBox>
<InputBox @ref="@_inputBoxSync"></InputBox>

<DerivedModal @ref="@_derived"></DerivedModal>

@code {
    private int currentCount = 0;
    private MessageBox _messageBox;
    private InputBox _inputBox;
    private InputBox _inputBoxSync;
    private DerivedModal _derived;

    private async void IncrementCountSync()
    {
        var result = await this._messageBox.ShowDialog("Counter", $"Do you want count up?", Enums.DialogButtons.YesNo);

        if (result == Enums.DialogResult.Yes)
        {
            currentCount++;
            InvokeAsync(StateHasChanged);
        }

        this._messageBox.Show("Counter", $"Current count: {currentCount}");
    }

    private void IncrementCountAsync()
    {
        currentCount++;

        if (currentCount <= 1)
        {
            this._messageBox.Show("Counter", $"Current count: {currentCount}", Enums.DialogButtons.OK);
        }
        else if (currentCount == 2)
        {
            this._messageBox.Show("Counter", $"Current count: {currentCount}", Enums.DialogButtons.OkCancle);
        }
        else if (currentCount >= 3)
        {
            this._messageBox.Show("Counter", $"Current count: {currentCount}", Enums.DialogButtons.YesNo);
        }
    }

    private async void SetCountSync()
    {
        var result = await _inputBoxSync.ShowDialog("Set Count", "Please set new 'currentCount':", "currentCount");

        if (result == DialogResult.OK && int.TryParse(_inputBoxSync.Result, out int count))
        {
            currentCount = count;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void SetCountAsync()
    {
        this._inputBox.Show("Set Count", "Please set new 'currentCount':");
    }

    private void SetCountAsyncCallback(MouseEventArgs e, DialogResult result)
    {
        if (result == DialogResult.OK)
        {
            if (int.TryParse(_inputBox.Result, out int count))
            {
                currentCount = count;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private async void OpenDerivedModal()
    {
        var r = await this._derived.ShowDialog();

        if (r == DialogResult.OK)
        {
            //do something
            //...
        }
    }
}